"""
Менеджер контекстов with автоматически открывает и закрывает потоки, связанные с ним.
Методы with:
__enter__() - срабатывает в момент создания объекта менеджера контекста
__exit__() - срабатывает в момент завершения работы менеджера контекста или возникновения исключения
"""

# with open('myfile.txt') as f:
#     for t in f:
#         print(t)

"""Можно сделать свой класс менеджера контекста"""


class DefenedVector:
    """Класс для работы с вектором. Если во время изменения v произойдет исключение, то v останется без изменений"""

    def __init__(self, v):
        self.__v = v

    def __enter__(self):
        """Срабатывает в момент создания with"""
        self.__temp = self.__v[:]
        return self.__temp  # это копия вектора v

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is None:  # Условие, если исключения не произошло
            self.__v[:] = self.__temp  # копируем поэлементно из __temp в v
        return False  # если False, то исключения, возникающие внутри with обрабатываться не будут,
        # если True - то исключения, возникающие внутри with не выходят за его пределы


v1 = [1, 2, 3]
v2 = [2, 3]

try:
    with DefenedVector(v1) as dv:  # здесь dv ссылается на копию вектора self.__temp, а v1 - вектор, который будет
        # защищен
        for i, a in enumerate(dv):
            dv[i] += v2[i]
except:
    print('Error')
print(v1)  # [1, 2, 3] - изменений нет, потому что with DefenedVector сохранил изначальные значения и работал с копией

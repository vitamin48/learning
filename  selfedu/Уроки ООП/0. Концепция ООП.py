"""
Класс может содержать свойства и методы
ИНКАПСУЛЯЦИЯ - скрытые (недоступные) данные и методы класса
НАСЛЕДОВАНИЕ - вынес за скобки общее для разных классов
ПОЛИМОРФИЗМ - возможность через единый интерфейс работать с объектами разных классов
"""

"""Полиморфизм (от греч. "много форм") — это способность объекта принимать разные формы, позволяя использовать общий 
интерфейс для разных типов данных."""

"""1. Полиморфизм в методах разных классов. У нас есть несколько классов: Cat и Dog. Оба имеют метод make_sound, 
который реализован по-разному в каждом классе, но вызывается одинаково"""


class Cat:
    def make_sound(self):
        return "Meow"


class Dog:
    def make_sound(self):
        return "Woof"


# Создадим объекты
cat = Cat()
dog = Dog()

# Вызываем метод make_sound
print(cat.make_sound())  # Выведет: Meow
print(dog.make_sound())  # Выведет: Woof
# Это называется полиморфизмом: один интерфейс (make_sound) работает для разных объектов (cat и dog)

"""2. Полиморфизм через функции. Мы можем написать функцию, которая работает с любым объектом, у которого есть метод 
make_sound."""


def animal_sound(animal):
    return animal.make_sound()


print(animal_sound(cat))  # Выведет: Meow
print(animal_sound(dog))  # Выведет: Woof

"""3. Полиморфизм с наследованием. Полиморфизм часто используется в сочетании с наследованием. Представим базовый 
класс Animal и его наследников."""

print('=' * 30)


class Animal:
    """Базовый класс Animal определяет метод make_sound, который должен быть переопределён в наследниках."""

    def make_sound(self):
        raise NotImplementedError("This method should be overridden")


class Cat(Animal):
    """Классы Cat и Dog переопределяют метод make_sound"""

    def make_sound(self):
        return "Meow"


class Dog(Animal):
    def make_sound(self):
        return "Woof"


animals = [Cat(), Dog()]

for animal in animals:
    print(animal.make_sound())

"""4. Полиморфизм в стандартных классах Python. Многие встроенные методы Python демонстрируют полиморфизм. 
Например, оператор + работает по-разному для чисел, строк и списков.

Оператор + является полиморфным: его поведение зависит от типов операндов.
Для чисел + выполняет арифметическое сложение.
Для строк — объединение.
Для списков — конкатенацию.
"""

# Сложение чисел
print(3 + 5)  # Выведет: 8

# Конкатенация строк
print("Hello, " + "world!")  # Выведет: Hello, world!

# Объединение списков
print([1, 2] + [3, 4])  # Выведет: [1, 2, 3, 4]

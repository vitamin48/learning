"""
Наследование - один класс определяется на основе другого.
Это нужно для уменьшения дублирования кода
"""


class Geom:
    name = 'Geom'

    def set_coords(self, x1, y1, x2, y2):
        """Данный метод необходим для работы обоих классов Line и Rect, наследуется из базового класса Geom.

        self здесь ссылается на объект класса в случае вызова: g = Geom()
        или
        self ссылается на класс Line и Rect соответственно при вызове метода из объекта этого дочернего класса:
        l.set_coords(1, 1, 2, 2) или r.set_coords(1, 1, 2, 2)
        Это Важный момент, т.к. здесь можно вызвать self.draw() и это будет работать при вызове метода set_coords из
        объекта дочернего класса, но будет ошибка, если этот метод будет вызван из объекта базового класса g = Geom().
        Обычно так не делают и стараются вызывать только методы в рамках одного базового класса.

        При вызове метода set_coords из дочернего класса, сначала метод set_coords ищется в самом класса, а затем в
        базовом
        """
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        # self.draw(1, 2, 3, 4)


class Line(Geom):
    """
    Geom - базовый или родительский класс
    Line - подкласс или дочерний класс
    """

    def draw(self):
        print('Рисование линии')


class Rect(Geom):
    name = 'Line'  # переопределение атрибута, т.к. name есть в базовом классе. Работает и с методами.

    def draw(self):
        print('Рисование прямоугольника')


g = Geom()
l = Line()
r = Rect()
print(g.name)  # Geom
print(l.name)  # Geom
l.set_coords(1, 1, 2, 2)
r.set_coords(1, 1, 2, 2)
"""Метод set_coords формирует локальные свойства для объектов дочерних классов"""
print(l.__dict__)  # {'x1': 1, 'y1': 1, 'x2': 2, 'y2': 2}
print(r.__dict__)  # {'x1': 1, 'y1': 1, 'x2': 2, 'y2': 2}

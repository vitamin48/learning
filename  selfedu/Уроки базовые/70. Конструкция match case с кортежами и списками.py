cmd = ('текс1', 'текст2', 250)  # точно также будет работать и со списком
match cmd:
    case tuple() as book:
        print(f'кортеж: {book}')  # кортеж: ('текс1', 'текст2', 250)
    case _:
        print('непонятный формат данных')

cmd2 = ('текс1', 'текст2', 250)
match cmd2:
    case text1, text2, inter:  # шаблон сработает, если кортеж содержит ровно 3 элемента
        # Для распаковки любого количества значений в кортеже можно в конце использовать *_
        print(f'кортеж: {text1}, {text2}, {inter}')  # кортеж: текс1, текст2, 250 (распаковка отработала корректно)

cmd3 = ('текс1', 'текст2', 250)
match cmd3:
    case text1, text2, inter, *_ if len(cmd3) < 6:  # распаковка успешна, если в кортеже или списке меньше 6 элементов
        # это не будет работать, если будет всего 2 элемента, т.е. меньше, чем задано
        # для удобства восприятия можно использовать круглые или квадратные скобки:
        # case (text1, text2, inter, *_) if len(cmd3) < 6 или case [text1, text2, inter, *_] if len(cmd3) < 6
        # также можно добавить проверку типа для каждого из элементов:
        # case (str() as text1, str() as text2, int() as inter, *_) if len(cmd3) < 6
        print(f'кортеж: {text1}, {text2}, {inter}')  # кортеж: текс1, текст2, 250 (распаковка отработала корректно)

cmd4 = ('текс1', 'текст2', 250)
cmd4 = (87, 'текс1', 'текст2', 250)  # 2 вариант
"Для проверки с учетом 2 вариантов закрываем проверочные шаблоны в скобки, но также можно использовать несколько case"
match cmd4:
    case [text1, text2, inter] | [_, text1, text2, inter]:  # имена переменных  и их количество в шаблонах должны
        # быть одинаковыми, дополнительно допускается применять нижнее подчеркивание (_)
        print(f'{text1}, {text2}')  # текс1, текст2

"""Блок match/case используется вместо операторов if/else. Иногда это нагляднее и добавляет бОльшей гибкости, т.к.
можно использовать шаблоны проверок. В этом блоке должен быть хотя бы 1 case как минимум с 1 оператором"""

cmd = 'top'

match cmd:
    case 'top':
        print('вверх')
    case 'left':
        print('влево')
    case _:  # блок, который отрабатывает всегда, когда другие блоки не отрабатывают (аналог else)
        print('другое')
print('проверки завершены')

cmd2 = '2'
match cmd2:
    case '1' | '2' | '3':  # несколько значений
        print('1-3')

cmd3 = 'cmd3'
match cmd3:
    case command:  # создается переменная command, которая ссылается на то же значение, что и cmd3
        print(f'Команда: {command}')  # Команда: cmd3
    # case уже добавить нельзя, будет ошибка, т.к. блок case command перехватывает все возможные варианты

cmd4 = 'cmd4'
match cmd4:
    case str():  # проверка на строку
        print('строка')

cmd5 = 'cmd5'
match cmd5:
    case str() as command:  # проверка на строку и сформировать новую переменную, которая будет ссылаться на эту строку
        # причем сначала идет проверка на строку, а только после этого создается переменная command
        print(f'строковая команда {command}')
    case int() as command if 0 <= command <= 9: # условия (guard - защитник) создаются также, как и в тернарных операт-х
        print(f'целочисленная команда {command}, причем от 0 до 9')

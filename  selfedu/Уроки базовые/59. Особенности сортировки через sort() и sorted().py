"""
Метод sort() применим только к спискам и он менят сам список, а функция sorted() - не меняет и работает с любым
итерируемым объектом, возвращает отсортированный список (новый)
"""
a = [1, -45, 3, 2, 100, -4]
a.sort()
print(a)  # [-45, -4, 1, 2, 3, 100] по умолчанию сортировка по возрастанию (неубыванию)

b = ('sdg', 'abc', 'zyz')  # здесь метод sort() вызвать нельзя, т.к. кортеж - неизменяемый тип данных

"""Для кортежеей можно использовать метод sorted()"""
print(sorted(b))  # ['abc', 'sdg', 'zyz']
print(sorted('python'))  # ['h', 'n', 'o', 'p', 't', 'y']

"""
Строку нельзя сравнивать с числом!
"""

print(sorted([1, 0, -5, 10, 20], reverse=True))  # [20, 10, 1, 0, -5] сортировка в обратном порядке
print('-' * 20)
d = {'A': '1', 'B': '2', 'C': '3', 'D': '4'}
print(sorted(d))  # ['A', 'B', 'C', 'D'] (только ключи, отсортированные по возрастанию)
print(sorted(d.values()))  # ['1', '2', '3', '4'] (только значения)
print(sorted(d.items()))  # [('A', '1'), ('B', '2'), ('C', '3'), ('D', '4')] (список из кортежей: ключ и значение)

"""
Чтобы получить отсортированный словарь по ключам, нужно применить sorted(d.items()), а затем полученный список из 
кортежей превратить снова в словарь
"""
f = sorted(d.items())
print(f)  # [('A', '1'), ('B', '2'), ('C', '3'), ('D', '4')]
df = dict(f)
print(df)  # {'A': '1', 'B': '2', 'C': '3', 'D': '4'} (отсортированный словарь)
